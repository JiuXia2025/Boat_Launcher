import java.nio.ByteBuffer;
import java.security.SecureRandom;
 
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
/**
 * 
 * @author whzhaochao
 * 
 * DES加密解密
 *
 */

	/**
	 * 
	 * @param str 待加密字符串
	 * @param password 密码
	 * @return
	 */
	
	public static String CodeStr(String str,String password){
		
		byte[] result = desCrypto(str.getBytes(), password);
		
		char[] chreslut=new char[result.length];
		for(int i=0; i<result.length;i++){
			char ch=(char) result[i];
			chreslut[i]=ch;
		}
		String strres=new String(chreslut);
		return strres;
	}
	/**
	 * 
	 * @param strres  待解密字符串
	 * @param password  密码
	 * @return
	 * @throws Exception
	 */
	public static String DcodeStr(String strres,String password) throws Exception{
		byte [] decode=new byte[strres.length()];
		
		for(int i=0;i<strres.length();i++){
			char ch=strres.charAt(i);
			byte b=(byte) ch;
			decode[i]=b;
		
		}
	     byte[] decryResult = decrypt(decode, password);
		return new String(decryResult);
	}
	/**
	 * 
	 * @param datasource 
	 * @param password
	 * @return
	 */
	public static byte[] desCrypto(byte[] datasource, String password) {
		
		
		try {
			SecureRandom random = new SecureRandom();
			DESKeySpec desKey = new DESKeySpec(password.getBytes());
			// 创建一个密匙工厂，然后用它把DESKeySpec转换成
			SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
			SecretKey securekey = keyFactory.generateSecret(desKey);
			// Cipher对象实际完成加密操作
			Cipher cipher = Cipher.getInstance("DES");
			// 用密匙初始化Cipher对象
			cipher.init(Cipher.ENCRYPT_MODE, securekey, random);
			// 现在，获取数据并加密
			// 正式执行加密操作
			return cipher.doFinal(datasource);
		} catch (Throwable e) {
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * 
	 * @param src
	 * @param password
	 * @return
	 * @throws Exception
	 */
 
	private static byte[] decrypt(byte[] src, String password) throws Exception {
		// DES算法要求有一个可信任的随机数源
		SecureRandom random = new SecureRandom();
		// 创建一个DESKeySpec对象
		DESKeySpec desKey = new DESKeySpec(password.getBytes());
		// 创建一个密匙工厂
		SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
		// 将DESKeySpec对象转换成SecretKey对象
		SecretKey securekey = keyFactory.generateSecret(desKey);
		// Cipher对象实际完成解密操作
		Cipher cipher = Cipher.getInstance("DES");
		// 用密匙初始化Cipher对象
		cipher.init(Cipher.DECRYPT_MODE, securekey, random);
		// 真正开始解密操作
		return cipher.doFinal(src);
	}